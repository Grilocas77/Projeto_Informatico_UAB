
üìÅ chatbot_controller.py ‚Äì Coordenador Central do Chatbot
üìå Fun√ß√£o no Projeto
Este m√≥dulo √© o cora√ß√£o da aplica√ß√£o, respons√°vel por orquestrar todo o ciclo de intera√ß√£o com o utilizador. √â o ponto de entrada do sistema chamado diretamente pela interface CLI (cli_interface.py) e tamb√©m por outras interfaces (Tkinter ou Discord, se usadas).

üîÑ Pipeline Implementado (Passo a Passo)
1. Entrada do Utilizador
Recebe a pergunta do utilizador via fun√ß√£o:


def process_user_input(question: str) -> str:
2. Recupera√ß√£o de Contexto (RAG)
Chama a fun√ß√£o retrieve_context() de rag_engine.py:


context_pt, scores, context_en, context_norm, debug_ctx = retrieve_context(...)
Isto ativa a pesquisa sem√¢ntica na base ChromaDB, com embeddings, e reranking com CrossEncoder.

3. Tradu√ß√£o (PT ‚ûú EN)
Traduz a pergunta para ingl√™s (compat√≠vel com o modelo Velvet):


question_en = traduzir(question, origem='pt', destino='en')
4. Gera√ß√£o com Velvet-2B
Cria um prompt em ingl√™s com o contexto + pergunta:


prompt_en = f"Context:\n{debug_ctx['context_en']}\n\nQuestion: {question_en}\nAnswer:"
Passa o prompt para o Velvet via generate_response() em velvet_runner.py.

5. Tradu√ß√£o da Resposta (EN ‚ûú PT)
Tradu√ß√£o autom√°tica da resposta gerada com MarianMT.

6. Valida√ß√£o da Resposta
Compara palavras-chave entre contexto e resposta com validar_resposta_por_keywords():


comuns = set(palavras_contexto).intersection(set(palavras_resposta))
7. M√©tricas e Registo
Salva:

M√©tricas (.jsonl)

Hist√≥rico de respostas (.json)

√öltima resposta (.json)

Logs t√©cnicos (.txt)

üß† Integra√ß√£o com Velvet-2B
O chatbot_controller.py n√£o cont√©m o modelo diretamente, mas prepara o prompt, envia e processa o output do Velvet.

Usa as tradu√ß√µes para contornar as limita√ß√µes lingu√≠sticas do Velvet-2B (treinado em ingl√™s/italiano).

Calcula m√©tricas para ajudar a avaliar a qualidade da resposta.

üöÄ Papel Cr√≠tico no Projeto
Assincronia via CLI: apesar deste ficheiro em si n√£o ser ass√≠ncrono, √© usado num ambiente ass√≠ncrono (CLI com asyncio) para permitir respostas r√°pidas e interativas, sem bloqueios de interface.

Modularidade: delega responsabilidades para outros m√≥dulos (tradu√ß√£o, gera√ß√£o, RAG), seguindo o padr√£o MVC.

‚úÖ Fun√ß√µes-Chave
Fun√ß√£o	Prop√≥sito
process_user_input	Pipeline completo de pergunta ‚Üí resposta
validar_resposta_por_keywords	Avalia√ß√£o da resposta
contar_tokens	Auxiliar para m√©tricas
log_evento, salvar_metricas, salvar_completo_em_arquivo	Registos para an√°lise posterior

üìå Justifica√ß√£o Tecnol√≥gica
RAG + Velvet: permite resposta personalizada com base em documentos reais (ChromaDB).

CrossEncoder (reranking): mais eficaz que a ordena√ß√£o por similaridade bruta, pois analisa contexto e pergunta em conjunto, ideal para ambientes educacionais.

MarianMT: garante compatibilidade lingu√≠stica, sem depender da internet (local).

Logs e m√©tricas: essenciais para avaliar o impacto pedag√≥gico, reprodutibilidade e melhoria futura.
