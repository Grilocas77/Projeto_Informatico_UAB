üìÅ rag_engine.py ‚Äì Recupera√ß√£o Sem√¢ntica com RAG e Reranking
üìå Fun√ß√£o no Projeto
Este m√≥dulo trata da procura e sele√ß√£o inteligente de contexto relevante para alimentar o modelo Velvet. Ele executa a t√©cnica RAG ‚Äì Retrieval-Augmented Generation, permitindo que o modelo responda com base em conhecimento armazenado em documentos da UC.

üîÑ Pipeline de Recupera√ß√£o (etapas chave)
1. Inicializa√ß√£o dos Componentes
Carrega:

Embeddings com HuggingFaceEmbeddings (modelo e5-large-v2)

Tokenizer para truncamento

Reranker com CrossEncoder (ms-marco-MiniLM-L-6-v2)

2. Busca na Base Vetorial (ChromaDB)
Usa a fun√ß√£o get_chroma_db() para carregar a base persistente criada previamente:


db = Chroma(persist_directory=CHROMA_PATH, embedding_function=embeddings)
3. Tradu√ß√£o da Pergunta (PT ‚ûú EN)
A pergunta √© traduzida para ingl√™s para compatibilidade com os embeddings (todos em EN).

4. Gera√ß√£o de Embedding da Pergunta
Vetoriza a pergunta com o modelo e5-large-v2.

5. Pesquisa por Similaridade
Executa KNN:


context_docs = db.similarity_search(query_en, k=K_SIMILARITY_SEARCH)
6. Reranking com CrossEncoder
Cada par (pergunta, documento) √© pontuado com reranker.predict(pairs)

Ordena os documentos por relev√¢ncia sem√¢ntica real (n√£o s√≥ por vetor).

7. Limpeza de Ru√≠do
Usa a fun√ß√£o limpar_ruido_contexto() para eliminar t√≠tulos, figuras, tabelas e ru√≠do lingu√≠stico.

8. Truncamento por Tokens
Usa truncate_by_tokens() para limitar o contexto a MAX_PROMPT_TOKENS, evitando falhas no modelo.

üß† Integra√ß√£o no Fluxo Velvet
O rag_engine.py determina o que o Velvet v√™. Se a sele√ß√£o de contexto for pobre, o Velvet dar√° uma resposta vaga. Por isso:

Embeddings (semantic vector search) fornecem candidatos iniciais

Reranking (CrossEncoder) afina para relev√¢ncia real

Limpeza e truncamento asseguram que s√≥ vai conte√∫do claro e relevante

Este m√≥dulo alimenta o prompt_en gerado no chatbot_controller.py.

‚úÖ Fun√ß√µes-Chave
Fun√ß√£o	Prop√≥sito
retrieve_context(...)	Fun√ß√£o principal usada no controlador
limpar_ruido_contexto(texto)	Remove ru√≠do irrelevante dos documentos
truncate_by_tokens(...)	Garante que o input ao modelo n√£o ultrapassa o limite
is_generic_context(...)	Heur√≠stica para evitar contextos muito vagos

üìå Justifica√ß√£o Tecnol√≥gica
Componente	Motivo da Escolha
RAG	Permite respostas baseadas em documentos reais
ChromaDB	Base vetorial leve, local e persistente
e5-large-v2	Modelo de embeddings de √∫ltima gera√ß√£o, com √≥tima performance sem√¢ntica
CrossEncoder	Avalia√ß√£o cruzada de pergunta-documento: mais preciso que dot-product
Limpeza/Truncamento	Foco na clareza ‚Üí ideal para uso pedag√≥gico

‚ú® Vantagens para o Projeto
Torna o chatbot ‚Äúconsciente‚Äù do conte√∫do da UC

Garante que Velvet recebe contexto informativo e relevante

Arquitetura 100% local: sem depend√™ncia de APIs externas

Flex√≠vel: base pode ser atualizada com novos conte√∫dos facilmente

